- Class: meta
  Course: STEP0042
  Lesson: Flipped Coding 1 - foundations for vectors, logical and subsetting
  Author: Michael Veale & Ine Steenmans
  Type: Standard
  Organization: UCL STEaPP (includes GNU content from https://github.com/swirldev/swirl_courses. Distributed GNU GPL v3)
  Version: 3

- Class: text
  Output: "Hi everyone! Welcome to the first flipped coding activity for our analysis module. Good work installing this package. We're going to be primarily learning R within R, which is pretty cool. Once you've completed it, you'll need to take a screenshot and paste it in the Moodle forum. Whenever you're ready, press Enter to continue."

- Class: cmd_question
  Output: "In its simplest form, R can be used as an interactive calculator. Type 5 + 7 in the Console and press Enter."
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: "Type 5 + 7 and press Enter."

- Class: text
  Output: "R simply prints the result of 12 by default. However, R is a programming language and often the reason we use a programming language instead of a calculator is to automate some process or avoid unnecessary repetition."

- Class: text
  Output: "In this case, we may want to use our result from above in a second calculation. Instead of retyping 5 + 7 every time, we can create a new variable that stores the result."

- Class: text
  Output: "The way you assign a value to a variable in R is by using the assignment operator, which looks like this: <- . Think of it as an arrow assigning the value on the right to the name on the left."

- Class: cmd_question
  Output: "To assign the result of 5 + 7 to a new variable called x, type x <- 5 + 7."
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: "Type x <- 5 + 7 and press Enter."

- Class: cmd_question
  Output: "To view the contents of the variable x, type x and press Enter."
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: "Type x and press Enter."

- Class: cmd_question
  Output: "Now, store the result of x - 3 in a new variable called y."
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: "Type y <- x - 3 and press Enter."

- Class: cmd_question
  Output: "What is the value of y? Type y to find out."
  CorrectAnswer: y
  AnswerTests: omnitest(correctExpr='y')
  Hint: "Type y and press Enter."

- Class: text
  Output: "Vectors are a core idea in R. A vector is simply a sequence of elements of the same type. Even a single number is technically a vector of length one."

- Class: cmd_question
  Output: "Create a vector with the numbers 1.1, 9, and 3.14 and store it as z. Use c(1.1, 9, 3.14)."
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: "Type z <- c(1.1, 9, 3.14)."

- Class: cmd_question
  Output: "Check help for c() by typing ?c (no parentheses)."
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: "Type ?c and press Enter."

- Class: cmd_question
  Output: "Combine z, 555, and z again using c(z, 555, z). Do not assign to a variable."
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: "Type c(z, 555, z)."

- Class: cmd_question
  Output: "Now type z * 2 + 100 and see what happens."
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: "Type z * 2 + 100."

- Class: text
  Output: "R performs operations element-by-element on vectors. Here, it multiplied each element by 2, then added 100 to each."

- Class: cmd_question
  Output: "Take the square root of z - 1 and assign it to my_sqrt."
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: "Type my_sqrt <- sqrt(z - 1)."

- Class: cmd_question
  Output: "Print my_sqrt to see what it contains."
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: "Type my_sqrt."

- Class: cmd_question
  Output: "Now create my_div as z divided by my_sqrt."
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: "Type my_div <- z / my_sqrt."

- Class: text
  Output: "If two vectors are the same length, R performs operations element-by-element. If not, it recycles the shorter one."

- Class: cmd_question
  Output: "Try c(1, 2, 3, 4) + c(0, 10, 100) to see recycling and a warning."
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: "Type c(1, 2, 3, 4) + c(0, 10, 100)."

- Class: text
  Output: "Next: sequences and repetition. Type 1:20 to make a sequence of integers."
  
- Class: cmd_question
  Output: "Try seq(0, 10, by = 0.5) to make a sequence from 0 to 10 by 0.5."
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: "Type seq(0, 10, by=0.5)."

- Class: text
  Output: "rep() repeats vectors. Try rep(0, times = 5)."

- Class: cmd_question
  Output: "Now create num_vect as c(0.5, 55, -10, 6)."
  CorrectAnswer: num_vect <- c(0.5, 55, -10, 6)
  AnswerTests: omnitest(correctExpr='num_vect <- c(0.5, 55, -10, 6)')
  Hint: "Type num_vect <- c(0.5, 55, -10, 6)."

- Class: cmd_question
  Output: "Make tf <- num_vect < 1."
  CorrectAnswer: tf <- num_vect < 1
  AnswerTests: omnitest(correctExpr='tf <- num_vect < 1')
  Hint: "Type tf <- num_vect < 1."

- Class: cmd_question
  Output: "Print tf."
  CorrectAnswer: tf
  AnswerTests: omnitest(correctExpr='tf')
  Hint: "Type tf."

- Class: cmd_question
  Output: "Now make y <- x[!is.na(x)] using your previous logic when working with missing values."
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: "Type y <- x[!is.na(x)]."

- Class: cmd_question
  Output: "Try y[y > 0] to return positive values."
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: "Type y[y > 0]."

- Class: text
  Output: "Great work so far! Let's finish with your completion code."

- Class: figure
  Output: "Generate your completion code using your UCL student number (7 digits)."
  Figure: finalcode.R
  FigureType: new

- Class: cmd_question
  Output: "Type completioncode(YOUR_7_DIGIT_NUMBER). Example: completioncode(1007893)."
  CorrectAnswer: completioncode(1234567)
  AnswerTests: expr_uses_func("completioncode")
  Hint: "Replace 1234567 with your own number, e.g. completioncode(1234567)."

- Class: text
  Output: "Copy your code and paste it in Moodle under Flipped Coding 1 Completion Code."

- Class: text
  Output: "If Moodle asks for a screenshot, include the console line showing completioncode(YOURNUMBER) and the printed code."

- Class: text
  Output: "Reflection time: On Moodle, youâ€™ll find a short question inviting you to connect what you learned here with the wider course. Aim for about 100 words."

- Class: text
  Output: "Saving and exiting: type bye() to exit and save progress. To return to the main menu, type main()."
